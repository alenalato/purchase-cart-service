// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alenalato/purchase-cart-service/internal/http (interfaces: modelConverter)
//
// Generated by this command:
//
//	mockgen -destination=converter_mock.go -package=http github.com/alenalato/purchase-cart-service/internal/http modelConverter
//

// Package http is a generated GoMock package.
package http

import (
	context "context"
	reflect "reflect"

	api "github.com/alenalato/purchase-cart-service/internal/api/go"
	bizlogic "github.com/alenalato/purchase-cart-service/internal/bizlogic"
	gomock "go.uber.org/mock/gomock"
)

// MockmodelConverter is a mock of modelConverter interface.
type MockmodelConverter struct {
	ctrl     *gomock.Controller
	recorder *MockmodelConverterMockRecorder
	isgomock struct{}
}

// MockmodelConverterMockRecorder is the mock recorder for MockmodelConverter.
type MockmodelConverterMockRecorder struct {
	mock *MockmodelConverter
}

// NewMockmodelConverter creates a new mock instance.
func NewMockmodelConverter(ctrl *gomock.Controller) *MockmodelConverter {
	mock := &MockmodelConverter{ctrl: ctrl}
	mock.recorder = &MockmodelConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmodelConverter) EXPECT() *MockmodelConverterMockRecorder {
	return m.recorder
}

// fromApiCreateOrderRequestToModel mocks base method.
func (m *MockmodelConverter) fromApiCreateOrderRequestToModel(ctx context.Context, req api.CreateOrderRequest) bizlogic.OrderDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fromApiCreateOrderRequestToModel", ctx, req)
	ret0, _ := ret[0].(bizlogic.OrderDetails)
	return ret0
}

// fromApiCreateOrderRequestToModel indicates an expected call of fromApiCreateOrderRequestToModel.
func (mr *MockmodelConverterMockRecorder) fromApiCreateOrderRequestToModel(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fromApiCreateOrderRequestToModel", reflect.TypeOf((*MockmodelConverter)(nil).fromApiCreateOrderRequestToModel), ctx, req)
}

// fromModelOrderToApi mocks base method.
func (m *MockmodelConverter) fromModelOrderToApi(ctx context.Context, order *bizlogic.Order) (api.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fromModelOrderToApi", ctx, order)
	ret0, _ := ret[0].(api.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fromModelOrderToApi indicates an expected call of fromModelOrderToApi.
func (mr *MockmodelConverterMockRecorder) fromModelOrderToApi(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fromModelOrderToApi", reflect.TypeOf((*MockmodelConverter)(nil).fromModelOrderToApi), ctx, order)
}
