// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alenalato/purchase-cart-service/internal/storage (interfaces: OrderStorage,PricingStorage)
//
// Generated by this command:
//
//	mockgen -destination=storage_mock.go -package=storage github.com/alenalato/purchase-cart-service/internal/storage OrderStorage,PricingStorage
//

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderStorage is a mock of OrderStorage interface.
type MockOrderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStorageMockRecorder
	isgomock struct{}
}

// MockOrderStorageMockRecorder is the mock recorder for MockOrderStorage.
type MockOrderStorageMockRecorder struct {
	mock *MockOrderStorage
}

// NewMockOrderStorage creates a new mock instance.
func NewMockOrderStorage(ctrl *gomock.Controller) *MockOrderStorage {
	mock := &MockOrderStorage{ctrl: ctrl}
	mock.recorder = &MockOrderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStorage) EXPECT() *MockOrderStorageMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderStorage) CreateOrder(ctx context.Context, orderDetails OrderDetails) (*Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, orderDetails)
	ret0, _ := ret[0].(*Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderStorageMockRecorder) CreateOrder(ctx, orderDetails any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderStorage)(nil).CreateOrder), ctx, orderDetails)
}

// MockPricingStorage is a mock of PricingStorage interface.
type MockPricingStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPricingStorageMockRecorder
	isgomock struct{}
}

// MockPricingStorageMockRecorder is the mock recorder for MockPricingStorage.
type MockPricingStorageMockRecorder struct {
	mock *MockPricingStorage
}

// NewMockPricingStorage creates a new mock instance.
func NewMockPricingStorage(ctrl *gomock.Controller) *MockPricingStorage {
	mock := &MockPricingStorage{ctrl: ctrl}
	mock.recorder = &MockPricingStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPricingStorage) EXPECT() *MockPricingStorageMockRecorder {
	return m.recorder
}

// GetProductPrices mocks base method.
func (m *MockPricingStorage) GetProductPrices(ctx context.Context, productIds []int) (map[int]ProductPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductPrices", ctx, productIds)
	ret0, _ := ret[0].(map[int]ProductPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductPrices indicates an expected call of GetProductPrices.
func (mr *MockPricingStorageMockRecorder) GetProductPrices(ctx, productIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductPrices", reflect.TypeOf((*MockPricingStorage)(nil).GetProductPrices), ctx, productIds)
}
