// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Purchase Cart API
 *
 * Purchase Cart API is an API to create an order with items and get the pricing information for the order
 *
 * API version: 1.0
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"
)

// PurchaseCartAPIController binds http requests to an api service and writes the service results to the http response
type PurchaseCartAPIController struct {
	service      PurchaseCartAPIServicer
	errorHandler ErrorHandler
}

// PurchaseCartAPIOption for how the controller is set up.
type PurchaseCartAPIOption func(*PurchaseCartAPIController)

// WithPurchaseCartAPIErrorHandler inject ErrorHandler into controller
func WithPurchaseCartAPIErrorHandler(h ErrorHandler) PurchaseCartAPIOption {
	return func(c *PurchaseCartAPIController) {
		c.errorHandler = h
	}
}

// NewPurchaseCartAPIController creates a default api controller
func NewPurchaseCartAPIController(s PurchaseCartAPIServicer, opts ...PurchaseCartAPIOption) *PurchaseCartAPIController {
	controller := &PurchaseCartAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PurchaseCartAPIController
func (c *PurchaseCartAPIController) Routes() Routes {
	return Routes{
		"V1OrderPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/order",
			c.V1OrderPost,
		},
	}
}

// V1OrderPost -
func (c *PurchaseCartAPIController) V1OrderPost(w http.ResponseWriter, r *http.Request) {
	var createOrderRequestParam CreateOrderRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createOrderRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateOrderRequestRequired(createOrderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateOrderRequestConstraints(createOrderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.V1OrderPost(r.Context(), createOrderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
