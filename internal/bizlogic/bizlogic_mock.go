// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alenalato/purchase-cart-service/internal/bizlogic (interfaces: PricingManager,OrderManager)
//
// Generated by this command:
//
//	mockgen -destination=bizlogic_mock.go -package=bizlogic github.com/alenalato/purchase-cart-service/internal/bizlogic PricingManager,OrderManager
//

// Package bizlogic is a generated GoMock package.
package bizlogic

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPricingManager is a mock of PricingManager interface.
type MockPricingManager struct {
	ctrl     *gomock.Controller
	recorder *MockPricingManagerMockRecorder
	isgomock struct{}
}

// MockPricingManagerMockRecorder is the mock recorder for MockPricingManager.
type MockPricingManagerMockRecorder struct {
	mock *MockPricingManager
}

// NewMockPricingManager creates a new mock instance.
func NewMockPricingManager(ctrl *gomock.Controller) *MockPricingManager {
	mock := &MockPricingManager{ctrl: ctrl}
	mock.recorder = &MockPricingManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPricingManager) EXPECT() *MockPricingManagerMockRecorder {
	return m.recorder
}

// GetItemsPrices mocks base method.
func (m *MockPricingManager) GetItemsPrices(ctx context.Context, items []OrderDetailsItem) ([]ItemPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsPrices", ctx, items)
	ret0, _ := ret[0].([]ItemPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsPrices indicates an expected call of GetItemsPrices.
func (mr *MockPricingManagerMockRecorder) GetItemsPrices(ctx, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsPrices", reflect.TypeOf((*MockPricingManager)(nil).GetItemsPrices), ctx, items)
}

// MockOrderManager is a mock of OrderManager interface.
type MockOrderManager struct {
	ctrl     *gomock.Controller
	recorder *MockOrderManagerMockRecorder
	isgomock struct{}
}

// MockOrderManagerMockRecorder is the mock recorder for MockOrderManager.
type MockOrderManagerMockRecorder struct {
	mock *MockOrderManager
}

// NewMockOrderManager creates a new mock instance.
func NewMockOrderManager(ctrl *gomock.Controller) *MockOrderManager {
	mock := &MockOrderManager{ctrl: ctrl}
	mock.recorder = &MockOrderManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderManager) EXPECT() *MockOrderManagerMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderManager) CreateOrder(ctx context.Context, details OrderDetails) (*Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, details)
	ret0, _ := ret[0].(*Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderManagerMockRecorder) CreateOrder(ctx, details any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderManager)(nil).CreateOrder), ctx, details)
}
