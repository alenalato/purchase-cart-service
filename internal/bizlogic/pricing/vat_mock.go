// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alenalato/purchase-cart-service/internal/bizlogic/pricing (interfaces: VatManager)
//
// Generated by this command:
//
//	mockgen -destination=vat_mock.go -package=pricing github.com/alenalato/purchase-cart-service/internal/bizlogic/pricing VatManager
//

// Package pricing is a generated GoMock package.
package pricing

import (
	context "context"
	reflect "reflect"

	decimal "github.com/govalues/decimal"
	gomock "go.uber.org/mock/gomock"
)

// MockVatManager is a mock of VatManager interface.
type MockVatManager struct {
	ctrl     *gomock.Controller
	recorder *MockVatManagerMockRecorder
	isgomock struct{}
}

// MockVatManagerMockRecorder is the mock recorder for MockVatManager.
type MockVatManagerMockRecorder struct {
	mock *MockVatManager
}

// NewMockVatManager creates a new mock instance.
func NewMockVatManager(ctrl *gomock.Controller) *MockVatManager {
	mock := &MockVatManager{ctrl: ctrl}
	mock.recorder = &MockVatManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVatManager) EXPECT() *MockVatManagerMockRecorder {
	return m.recorder
}

// CalculateVat mocks base method.
func (m *MockVatManager) CalculateVat(ctx context.Context, class int, amount decimal.Decimal, vatContext any) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateVat", ctx, class, amount, vatContext)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateVat indicates an expected call of CalculateVat.
func (mr *MockVatManagerMockRecorder) CalculateVat(ctx, class, amount, vatContext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateVat", reflect.TypeOf((*MockVatManager)(nil).CalculateVat), ctx, class, amount, vatContext)
}
