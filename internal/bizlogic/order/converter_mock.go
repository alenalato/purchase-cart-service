// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alenalato/purchase-cart-service/internal/bizlogic/order (interfaces: modelConverter)
//
// Generated by this command:
//
//	mockgen -destination=converter_mock.go -package=order github.com/alenalato/purchase-cart-service/internal/bizlogic/order modelConverter
//

// Package order is a generated GoMock package.
package order

import (
	context "context"
	reflect "reflect"

	bizlogic "github.com/alenalato/purchase-cart-service/internal/bizlogic"
	storage "github.com/alenalato/purchase-cart-service/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockmodelConverter is a mock of modelConverter interface.
type MockmodelConverter struct {
	ctrl     *gomock.Controller
	recorder *MockmodelConverterMockRecorder
	isgomock struct{}
}

// MockmodelConverterMockRecorder is the mock recorder for MockmodelConverter.
type MockmodelConverterMockRecorder struct {
	mock *MockmodelConverter
}

// NewMockmodelConverter creates a new mock instance.
func NewMockmodelConverter(ctrl *gomock.Controller) *MockmodelConverter {
	mock := &MockmodelConverter{ctrl: ctrl}
	mock.recorder = &MockmodelConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmodelConverter) EXPECT() *MockmodelConverterMockRecorder {
	return m.recorder
}

// fromModelOrderDetailsToStorage mocks base method.
func (m *MockmodelConverter) fromModelOrderDetailsToStorage(ctx context.Context, order bizlogic.OrderDetails) storage.OrderDetails {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fromModelOrderDetailsToStorage", ctx, order)
	ret0, _ := ret[0].(storage.OrderDetails)
	return ret0
}

// fromModelOrderDetailsToStorage indicates an expected call of fromModelOrderDetailsToStorage.
func (mr *MockmodelConverterMockRecorder) fromModelOrderDetailsToStorage(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fromModelOrderDetailsToStorage", reflect.TypeOf((*MockmodelConverter)(nil).fromModelOrderDetailsToStorage), ctx, order)
}

// fromStorageOrderToModel mocks base method.
func (m *MockmodelConverter) fromStorageOrderToModel(ctx context.Context, order *storage.Order) *bizlogic.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fromStorageOrderToModel", ctx, order)
	ret0, _ := ret[0].(*bizlogic.Order)
	return ret0
}

// fromStorageOrderToModel indicates an expected call of fromStorageOrderToModel.
func (mr *MockmodelConverterMockRecorder) fromStorageOrderToModel(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fromStorageOrderToModel", reflect.TypeOf((*MockmodelConverter)(nil).fromStorageOrderToModel), ctx, order)
}
